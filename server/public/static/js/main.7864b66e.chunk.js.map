{"version":3,"sources":["lib/auth.js","Auth/AuthRoute.jsx","Chat/index.jsx","lib/socketHooks.js","Home.jsx","lib/requestHooks.js","lib/api.js","Auth/LoginForm.jsx","Auth/RegisterForm.jsx","App.jsx","serviceWorker.js","index.js"],"names":["saveSession","token","sessionStorage","setItem","getSession","getItem","AuthRoute","Component","component","rest","render","props","to","pathname","state","from","location","COLORS","getUsernameColor","username","hash","i","length","charCodeAt","index","Math","abs","Username","className","style","color","MessageText","text","Message","isSelfMessage","textAlign","LogMessage","Chat","useState","wildAmount","setWildAmount","currentMessage","setCurrentMessage","type","messages","setMessages","query","socket","setSocket","isConnecting","setConnecting","error","setError","useEffect","ioSocket","io","on","console","log","emit","msg","data","useSocket","onMessage","message","serverName","Button","variant","onClick","e","IconButton","map","key","value","placeholder","onChange","target","onKeyDown","keyCode","Home","useLazyRequest","setData","isLoading","setLoading","lastUpdated","setLastUpdated","params","then","result","Date","now","catch","err","finally","api","axios","create","registerRequest","post","loginRequest","LoginForm","withRouter","useForm","register","handleSubmit","errors","watch","loginUser","userData","user","history","push","authenticated","Container","maxWidth","onSubmit","htmlFor","id","name","ref","required","aria-describedby","password","RegisterForm","getValues","registerUser","v","validate","confirmPassword","theme","createMuiTheme","palette","typography","useNextVariants","ThemeProvider","path","exact","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7864b66e.chunk.js","sourcesContent":["export const saveSession = token => {\n  sessionStorage.setItem('token', token);\n};\n\nexport const getSession = () => {\n  return sessionStorage.getItem('token');\n};","import React from 'react';\nimport { Redirect, Route } from 'react-router-dom';\nimport { getSession } from \"../lib/auth\";\n\nexport const AuthRoute = ({ component: Component, ...rest }) => {\n  return (\n    <Route\n      {...rest}\n      render={(props) => getSession()\n        ? <Component {...props} />\n        : <Redirect to={{ pathname: '/login', state: { from: props.location } }} />}\n    />\n  )\n}\n","import React, { useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nimport { ButtonGroup, Button, IconButton, Icon } from '@material-ui/core'\nimport Add from '@material-ui/icons/Add';\nimport Remove from '@material-ui/icons/Remove';\nimport './styles.css';\nimport { useSocket } from '../lib/socketHooks';\n\nconst FADE_TIME = 150; // ms\nconst TYPING_TIMER_LENGTH = 400; // ms\nconst COLORS = [\n  '#e21400', '#91580f', '#f8a700', '#f78b00',\n  '#58dc00', '#287b00', '#a8f07a', '#4ae8c4',\n  '#3b88eb', '#3824aa', '#a700ff', '#d300e7'\n];\n\n// Gets the color of a username through our hash function\nfunction getUsernameColor(username) {\n  // Compute hash code\n  let hash = 7;\n  for (let i = 0; i < username.length; i++) {\n    hash = username.charCodeAt(i) + (hash << 5) - hash;\n  }\n  // Calculate color\n  const index = Math.abs(hash % COLORS.length);\n  return COLORS[index];\n}\n\nexport const Username = props => {\n  return (\n    <span className=\"username\" style={{ color: getUsernameColor(props.username) }}>\n      {props.username}:&nbsp;\n    </span>\n  )\n};\n\nexport const MessageText = props => {\n  return (\n    <span className=\"messageBody\">\n      {props.text}\n    </span>\n  )\n};\n\nexport const Message = ({ username, text, isSelfMessage = false }) => {\n  return (\n    <li className=\"message\">\n      <div style={{\n        textAlign: isSelfMessage ? 'left' : 'right',\n      }}>\n        <Username username={username} />\n        <MessageText text={text} />\n      </div>\n    </li>\n  );\n};\n\nexport const LogMessage = ({ text }) => {\n  return (\n    <li className=\"log\">{text}</li>\n  );\n}\n\nexport const Chat = props => {\n  const [wildAmount, setWildAmount] = useState(2);\n  const [currentMessage, setCurrentMessage] = useState('');\n  const [messages, setMessages] = useState([{\n    type: 'log',\n    text: 'Hello World',\n  }]);\n  const { socket, isConnecting, error } = useSocket();\n  if (error) {\n    console.log(error);\n  }\n\n  const onMessage = msg => {\n    setMessages(messages => [\n      ...messages,\n      {\n        type: 'chatMessage',\n        text: msg.message,\n        username: msg.username,\n      }\n    ]);\n  };\n\n  useEffect(() => {\n    console.log('useEffect');\n    if (socket) {\n      socket.on('new message', onMessage);\n      socket.on('my-name-is', serverName => {\n        setMessages(messages => [\n          ...messages,\n          {\n            type: 'log',\n            text: 'You are connected to server ' + serverName\n          }\n        ]);\n      });\n\n      socket.on('blast', data => {\n        setMessages(messages => [\n          ...messages,\n          {\n            type: 'log',\n            text: 'Got blast from ' + data.username\n          }\n        ]);\n      });\n      socket.on('spin', data => {\n        setMessages(messages => [\n          ...messages,\n          {\n            type: 'log',\n            text: 'Got spin from ' + data.username\n          }\n        ]);\n      });\n      socket.on('wild', data => {\n        setMessages(messages => [\n          ...messages,\n          {\n            type: 'log',\n            text: 'Got wild from ' + data.username\n          }\n        ]);\n      });\n    }\n  }, [socket]);\n\n  const onSpinClicked = e => {\n    socket.emit('spin');\n  };\n  const onWildClicked = e => {\n    socket.emit('wild', wildAmount);\n  };\n  const onBlastClicked = e => {\n    socket.emit('blast');\n  };\n  const onTextChange = e => {\n    setCurrentMessage(e.target.value);\n  }\n\n  const onTextKeyPress = e => {\n    if (e.keyCode == 13) {\n      console.log('value', e.target.value);\n      setMessages(messages => [\n        ...messages,\n        {\n          type: 'selfMessage',\n          text: currentMessage,\n          username: socket.username,\n        }\n      ]);\n      socket.emit('new message', currentMessage);\n      setCurrentMessage('');\n    }\n  }\n\n\n  return isConnecting ? <div>Loading..</div> : (\n    <div className=\"container\">\n      <div className=\"buttonsContainer\">\n        <Button \n          variant=\"contained\"\n          color=\"primary\"\n          onClick={onSpinClicked}\n        >\n          SPIN\n        </Button>\n        <IconButton color=\"primary\" component=\"span\" onClick={() => setWildAmount(wildAmount => wildAmount + 1)}>\n          <Add />\n        </IconButton>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={onWildClicked}\n        >\n          WILD({wildAmount})\n        </Button>\n        <IconButton color=\"primary\" component=\"span\" onClick={() => setWildAmount(wildAmount => wildAmount - 1)}>\n          <Remove />\n        </IconButton>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={onBlastClicked}\n        >\n          BLAST\n        </Button>\n      </div>\n      <div className=\"chatArea\">\n        <ul className=\"messages\">\n          {messages &&\n            messages.map((message, key) => message.type === 'log' ?\n              <LogMessage key={key} text={message.text} /> :\n              <Message\n                key={key}\n                username={message.username}\n                text={message.text}\n                isSelfMessage={message.type === 'selfMessage'}\n              />\n            )\n          }\n        </ul>\n        <input\n          className=\"inputMessage\"\n          value={currentMessage}\n          placeholder=\"Type here...\"\n          onChange={onTextChange}\n          onKeyDown={onTextKeyPress}\n        />\n      </div>\n    </div>\n  );\n}\n","import { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport { getSession } from './auth';\n\nexport const useSocket = (query) => {\n  const [socket, setSocket] = useState()\n  const [isConnecting, setConnecting] = useState(true)\n  const [error, setError] = useState()\n\n  useEffect(() => {\n    const ioSocket = io();\n    ioSocket.on('connect', () => {\n      console.log('connect');\n      ioSocket.emit(\"authentication\", { token: getSession() });\n    });\n    ioSocket.on('disconnect', () => {\n      setConnecting(false);\n      setError({msg: 'disconnected'});;\n    });\n  \n    ioSocket.on('authenticated', data => {\n      console.log(data);\n      ioSocket.username = data;\n      setSocket(ioSocket);\n      setConnecting(false);\n    });\n    ioSocket.on('unauthorized', data => {\n      setConnecting(false);\n      setError({msg: 'unauthorized'});\n    });\n  }, []);\n  // ioSocket.emit(\"authentication\", { token: getSession() });\n\n  return {\n    socket,\n    isConnecting,\n    error\n  };\n};","import React from 'react';\nimport { Chat } from './Chat';\n\nexport const Home = () => {\n  return (\n    <Chat />\n  );\n}\n","import { useState } from 'react';\n\nexport const useLazyRequest = (query) => {\n  const [data, setData] = useState()\n  const [isLoading, setLoading] = useState(false)\n  const [lastUpdated, setLastUpdated] = useState()\n  const [error, setError] = useState()\n  const request = (params) => {\n    setLoading(true)\n    setError(null)\n\n    return query(params)\n      .then(result => {\n        setData(result)\n        setLastUpdated(Date.now())\n      })\n      .catch(err => {\n        setError(err)\n      })\n      .finally(() => {\n        setLoading(false)\n      })\n  };\n\n  return [\n    request,\n    {\n      data,\n      isLoading,\n      lastUpdated,\n      error\n    }\n  ]\n};\n\nexport const useRequest = (query) => {\n  const [\n    request,\n    {\n      data,\n      isLoading,\n      lastUpdated,\n      error\n    }\n  ] = useLazyRequest(query);\n  request();\n  return {\n    data,\n    isLoading,\n    lastUpdated,\n    error\n  };\n}","import axios from 'axios';\n\nconst api = axios.create();\n\nexport const registerRequest = data => api.post('/register', data);\nexport const loginRequest = data => api.post('/login', data);","import React, { useState } from \"react\";\nimport { Redirect, withRouter } from 'react-router-dom';\nimport { useForm } from 'react-hook-form'\nimport { Container } from '@material-ui/core'\nimport { Link } from 'react-router-dom';\nimport { useLazyRequest } from '../lib/requestHooks'\nimport './styles.css';\nimport { loginRequest } from '../lib/api';\nimport { saveSession } from '../lib/auth';\n\nexport const LoginForm = withRouter((props) => {\n  const { register, handleSubmit, watch, errors } = useForm()\n  // const [ userData, setUserData] = useState();\n  const [ loginUser, { isLoading, data: userData } ] = useLazyRequest(loginRequest);\n  // const isLoading = false;\n\n  const onSubmit = data => {\n    // console.log(data);\n    loginUser(data);\n  }\n\n  if(userData) {\n    const { data: user } = userData; \n    saveSession(user.token);\n    props.history.push('/', { authenticated: true });\n  }\n\n  return isLoading ? <div>Loading..</div> :(\n    <Container maxWidth=\"sm\">\n      <div className=\"container\">\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <label htmlFor=\"username\">Username</label>\n          <input\n            id=\"username\"\n            name=\"username\"\n            ref={register({ required: true })}\n          />\n          {errors.username && <span className=\"error\">This field is required</span>}\n          <label htmlFor=\"password\">Password:</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            name=\"password\"\n            aria-describedby=\"password-helper-text\"\n            ref={register({ required: true })}\n          />\n          {errors.password && <span className=\"error\">This field is required</span>}\n          <input type=\"submit\" />\n          <Link to=\"/register\">Register new user</Link>\n        </form>\n      </div>\n    </Container>\n  );\n});\n","import React, { useState } from \"react\";\nimport { useForm } from 'react-hook-form'\nimport { Redirect, withRouter } from 'react-router-dom';\nimport { Container } from '@material-ui/core'\nimport { Link } from 'react-router-dom';\nimport { useLazyRequest } from '../lib/requestHooks'\nimport { registerRequest } from '../lib/api';\nimport { saveSession } from \"../lib/auth\";\nimport \"./styles.css\";\n\nexport const RegisterForm = withRouter((props) => {\n  const { register, handleSubmit, watch, getValues, errors } = useForm()\n  const [ registerUser, { isLoading, data: userData } ] = useLazyRequest(registerRequest);\n  const onSubmit = data => {\n    registerUser(data);\n    console.log({data, v: getValues()});\n  }\n\n  if(userData) {\n    const { data: user } = userData; \n    saveSession(user.token);\n    return <Redirect to={{ pathname: '/', state: { from: props.location } }} />;\n  }\n\n  return isLoading ? <div>Loading..</div> : (\n    <Container maxWidth=\"sm\">\n      <div className=\"container\">\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <label htmlFor=\"username\">Username</label>\n          <input\n            id=\"username\"\n            name=\"username\"\n            ref={register({ required: true })}\n          />\n          {errors.username && <span className=\"error\">This field is required</span>}\n          <label htmlFor=\"password\">Password:</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            name=\"password\"\n            ref={register({ required: true })}\n          />\n          {errors.password && <span className=\"error\">This field is required</span>}\n          <label htmlFor=\"confirmPassword\">Confirm Password:</label>\n          <input\n            type=\"password\"\n            id=\"confirmPassword\"\n            name=\"confirmPassword\"\n            ref={register({ required: true, validate: value => value ===  watch('password')  || 'Passwords don\\'t match.' })}\n          />\n          {errors.confirmPassword && <span className=\"error\">{errors.confirmPassword.message || 'This field is required'}</span>}\n          <input type=\"submit\" />\n          <Link to=\"/login\">Login</Link>\n        </form>\n      </div>\n    </Container>\n  );\n});","import React, { useState, useEffect } from 'react';\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport { Switch, Route } from 'react-router-dom';\n\nimport { AuthRoute } from './Auth/AuthRoute';\nimport { Home } from './Home';\nimport { LoginForm } from './Auth/LoginForm';\nimport { RegisterForm } from './Auth/RegisterForm';\n\nimport './App.css';\n\n// create our material ui theme using up to date typography variables\nconst theme = createMuiTheme({\n  palette: {\n    type: \"dark\"\n  },\n  typography: {\n    useNextVariants: true\n  }\n});\n\nexport default () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <div className=\"App\">\n        <Switch>\n          <AuthRoute path=\"/\" component={Home} exact />\n          <Route path=\"/login\" component={LoginForm} />\n          <Route path=\"/register\" component={RegisterForm} />        \n        </Switch>\n      </div>\n    </ThemeProvider>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}