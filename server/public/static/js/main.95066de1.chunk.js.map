{"version":3,"sources":["Auth/AuthRoute.jsx","Home.jsx","Auth/LoginForm.jsx","lib/requestHooks.js","lib/api.js","Auth/RegisterForm.jsx","App.jsx","serviceWorker.js","index.js"],"names":["AuthRoute","Component","component","authenticated","rest","render","props","to","pathname","state","from","location","Home","LoginForm","useForm","register","handleSubmit","watch","errors","console","log","Container","maxWidth","className","onSubmit","data","htmlFor","id","name","ref","required","username","type","aria-describedby","password","useLazyRequest","query","useState","setData","isLoading","setLoading","lastUpdated","setLastUpdated","error","setError","params","then","result","Date","now","catch","err","finally","api","axios","create","baseURL","registerRequest","post","RegisterForm","getValues","registerUser","user","v","validate","value","confirmPassword","message","theme","createMuiTheme","palette","typography","useNextVariants","ThemeProvider","path","exact","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.95066de1.chunk.js","sourcesContent":["import React from 'react';\nimport { Redirect, Route } from 'react-router-dom';\n\nexport const AuthRoute = ({ component: Component, authenticated, ...rest }) => {\n  return (\n    <Route\n      {...rest}\n      render={(props) => authenticated === true\n        ? <Component {...props} />\n        : <Redirect to={{ pathname: '/login', state: { from: props.location } }} />}\n    />\n  )\n}\n","import React from 'react';\nimport { Redirect } from 'react-router-dom';\n\nexport const Home = () => {\n\n  return (\n    <div>Hello World!</div>\n  );\n}\n","import React, { useState } from \"react\";\nimport { useForm } from 'react-hook-form'\nimport { Container } from '@material-ui/core'\nimport { Link } from 'react-router-dom';\nimport { useRequest } from 'use-request-hook'\nimport \"./styles.css\";\n\nexport const LoginForm = () => {\n\n  const { register, handleSubmit, watch, errors } = useForm()\n  // cost login = () => \n  // const { isLoading, data: user = {} } = useRequest(getPosts, [])\n  const onSubmit = data => {\n    console.log(data);\n    // const { isLoading, data: user = {} } = useRequest(getPosts, [])\n  }\n\n  console.log(watch('example')) // watch input value by passing the name of it\n\n  return (\n    <Container maxWidth=\"sm\">\n      <div className=\"container\">\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <label htmlFor=\"username\">Username</label>\n          <input\n            id=\"username\"\n            name=\"username\"\n            ref={register({ required: true })}\n          />\n          {errors.username && <span className=\"error\">This field is required</span>}\n          <label htmlFor=\"password\">Password:</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            name=\"password\"\n            aria-describedby=\"password-helper-text\"\n            ref={register({ required: true })}\n          />\n          {errors.password && <span className=\"error\">This field is required</span>}\n          <input type=\"submit\" />\n          <Link to=\"/register\">Register new user</Link>\n        </form>\n      </div>\n    </Container>\n  );\n}","import { useState, useEffect } from 'react'\n\nexport const useR = (\n  query,\n  resolveInputs = null\n) => {\n  const resolve = resolveInputs != null\n  const [data, setData] = useState()\n  const [isLoading, setLoading] = useState(resolve)\n  const [lastUpdated, setLastUpdated] = useState()\n  const [error, setError] = useState()\n\n  const request = (...args) => {\n    setLoading(true)\n    setError(null)\n\n    return query(...args)\n      .then(result => {\n        setData(result)\n        setLastUpdated(Date.now())\n      })\n      .catch(err => {\n        setError(err)\n      })\n      .finally(() => {\n        setLoading(false)\n      })\n  }\n\n  useEffect(() => {\n    if (resolve) {\n      request()\n    }\n  }, resolveInputs)\n\n  return {\n    request,\n    data,\n    isLoading,\n    lastUpdated,\n    error\n  }\n}\n\nexport const useLazyRequest = (query) => {\n  const [data, setData] = useState()\n  const [isLoading, setLoading] = useState(false)\n  const [lastUpdated, setLastUpdated] = useState()\n  const [error, setError] = useState()\n  const request = (params) => {\n    setLoading(true)\n    setError(null)\n\n    return query(params)\n      .then(result => {\n        setData(result)\n        setLastUpdated(Date.now())\n      })\n      .catch(err => {\n        setError(err)\n      })\n      .finally(() => {\n        setLoading(false)\n      })\n  };\n\n  return [\n    request,\n    {\n      data,\n      isLoading,\n      lastUpdated,\n      error\n    }\n  ]\n};\n\nexport const useRequest = (query) => {\n  const [\n    request,\n    {\n      data,\n      isLoading,\n      lastUpdated,\n      error\n    }\n  ] = useLazyRequest(query);\n  request();\n  return {\n    data,\n    isLoading,\n    lastUpdated,\n    error\n  };\n}","import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: 'http://localhost:3000'\n});\n\nexport const registerRequest = data => api.post('/user', data);","import React, { useState } from \"react\";\nimport { useForm } from 'react-hook-form'\nimport { Container } from '@material-ui/core'\nimport { Link } from 'react-router-dom';\nimport { useLazyRequest } from '../lib/requestHooks'\nimport { registerRequest } from '../lib/api';\nimport \"./styles.css\";\n\nexport const RegisterForm = () => {\n\n  const { register, handleSubmit, watch, getValues, errors } = useForm()\n  // const [ doRegister, setDoRegister ] = useState(false);\n  // const [ values, setValues ] = useState({});\n\n  // console.log({doRegister, ...values} )\n  // const { isLoading, data: user } = useRequest(registerRequest, [doRegister], values)\n  const [ registerUser, { isLoading, data: user } ] = useLazyRequest(registerRequest);\n  const onSubmit = data => {\n    registerUser(data);\n    console.log({data, v: getValues()});\n  }\n\n  if(isLoading) {\n    console.log({isLoading});\n  }\n\n  if(user) {\n    console.log({user});\n  }\n  return (\n    <Container maxWidth=\"sm\">\n      <div className=\"container\">\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <label htmlFor=\"username\">Username</label>\n          <input\n            id=\"username\"\n            name=\"username\"\n            ref={register({ required: true })}\n          />\n          {errors.username && <span className=\"error\">This field is required</span>}\n          <label htmlFor=\"password\">Password:</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            name=\"password\"\n            ref={register({ required: true })}\n          />\n          {errors.password && <span className=\"error\">This field is required</span>}\n          <label htmlFor=\"confirmPassword\">Confirm Password:</label>\n          <input\n            type=\"password\"\n            id=\"confirmPassword\"\n            name=\"confirmPassword\"\n            ref={register({ required: true, validate: value => value ===  watch('password')  || 'Passwords don\\'t match.' })}\n          />\n          {errors.confirmPassword && <span className=\"error\">{errors.confirmPassword.message || 'This field is required'}</span>}\n          <input type=\"submit\" />\n          <Link to=\"/login\">Login</Link>\n        </form>\n      </div>\n    </Container>\n  );\n}","import React from 'react';\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport { Switch, Route } from 'react-router-dom';\n\nimport { AuthRoute } from './Auth/AuthRoute';\nimport { Home } from './Home';\nimport { LoginForm } from './Auth/LoginForm';\nimport { RegisterForm } from './Auth/RegisterForm';\n\nimport './App.css';\n\n// create our material ui theme using up to date typography variables\nconst theme = createMuiTheme({\n  palette: {\n    type: \"dark\"\n  },\n  typography: {\n    useNextVariants: true\n  }\n});\n\nexport default () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <div className=\"App\">\n        <Switch>\n          <AuthRoute path=\"/\" component={Home} exact />\n          <Route path=\"/login\" component={LoginForm} />\n          <Route path=\"/register\" component={RegisterForm} />        \n        </Switch>\n      </div>\n    </ThemeProvider>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}